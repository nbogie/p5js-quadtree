"use strict";
var Particle = (function () {
    function Particle(x, y) {
        this.pos = createVector(x, y);
    }
    Particle.prototype.draw = function () {
        stroke("white");
        strokeWeight(1);
        point(this.pos.x, this.pos.y);
    };
    Particle.randomOnScreen = function () {
        return new Particle(random(width), random(height));
    };
    Particle.perlinRandomOnScreen = function (ix) {
        var x = width * noise(ix + frameCount / 100);
        var y = height * noise(7 * ix + frameCount / 123);
        return new Particle(x, y);
    };
    return Particle;
}());
var gQTCounter = 0;
var QuadTree = (function () {
    function QuadTree(center, w, h) {
        this.myID = gQTCounter++;
        this.rectangle = new Rectangle(center.x, center.y, w, h);
        this.directlyContainedPoints = [];
        this.capacity = 20;
    }
    QuadTree.build = function (cx, cy, w, h, gPoints) {
        var t = new QuadTree(createVector(cx, cy), w, h);
        gPoints.forEach(function (p) { return t.insert(p); });
        return t;
    };
    QuadTree.prototype.insert = function (p) {
        if (!this.fallsWithin(p)) {
            return false;
        }
        if (this.directlyContainedPoints.length < this.capacity) {
            this.directlyContainedPoints.push(p);
            return true;
        }
        else {
            if (!this.isSubdivided()) {
                this.subdivide();
            }
            if (this.ne.insert(p)) {
                return true;
            }
            if (this.nw.insert(p)) {
                return true;
            }
            if (this.se.insert(p)) {
                return true;
            }
            if (this.sw.insert(p)) {
                return true;
            }
            throw new Error("Should be unreachable.  All subquads reject point insertion.");
        }
    };
    QuadTree.prototype.subdivide = function () {
        var cx = this.rectangle.cx;
        var cy = this.rectangle.cy;
        var qW = this.rectangle.w / 4;
        var qH = this.rectangle.h / 4;
        var hW = qW * 2;
        var hH = qH * 2;
        this.ne = new QuadTree(cv(cx + qW, cy - qH), hW, hH);
        this.nw = new QuadTree(cv(cx - qW, cy - qH), hW, hH);
        this.se = new QuadTree(cv(cx + qW, cy + qH), hW, hH);
        this.sw = new QuadTree(cv(cx - qW, cy + qH), hW, hH);
    };
    QuadTree.prototype.fallsWithin = function (p) {
        return this.rectangle.fallsWithin(p);
    };
    QuadTree.prototype.isSubdivided = function () {
        return this.ne !== undefined;
    };
    QuadTree.prototype.query = function (queryRectangle, results) {
        if (results == undefined) {
            results = [];
        }
        if (this.rectangle.overlaps(queryRectangle)) {
            results.push.apply(results, this.directlyContainedPoints.filter(function (p) {
                return queryRectangle.fallsWithin(p);
            }));
            if (this.isSubdivided()) {
                for (var _i = 0, _a = [this.ne, this.nw, this.se, this.sw]; _i < _a.length; _i++) {
                    var subtree = _a[_i];
                    subtree.query(queryRectangle, results);
                }
            }
        }
        return results;
    };
    return QuadTree;
}());
var cv = function (x, y) { return createVector(x, y); };
function drawQuadTreeForP5(tree) {
    stroke("yellow");
    strokeWeight(0.3);
    noFill();
    rectMode(CENTER);
    rect(tree.rectangle.cx, tree.rectangle.cy, tree.rectangle.w, tree.rectangle.h);
    noStroke();
    fill("white");
    textSize(10);
    text(tree.myID, tree.rectangle.cx, tree.rectangle.cy);
    if (tree.isSubdivided()) {
        for (var _i = 0, _a = [tree.ne, tree.nw, tree.se, tree.sw]; _i < _a.length; _i++) {
            var subtree = _a[_i];
            drawQuadTreeForP5(subtree);
        }
    }
}
var Rectangle = (function () {
    function Rectangle(cx, cy, w, h) {
        this.cx = cx;
        this.cy = cy;
        this.w = w;
        this.h = h;
        this.t = this.cy - h / 2;
        this.b = this.cy + h / 2;
        this.l = this.cx - w / 2;
        this.r = this.cx + w / 2;
    }
    Rectangle.prototype.fallsWithin = function (p) {
        return (p.pos.x >= this.l &&
            p.pos.x <= this.r &&
            p.pos.y >= this.t &&
            p.pos.y <= this.b);
    };
    Rectangle.prototype.overlaps = function (r2) {
        return (this.r >= r2.l &&
            this.l <= r2.r &&
            this.t <= r2.b &&
            this.b >= r2.t);
    };
    return Rectangle;
}());
function assertTrue(assertion, text) {
    if (!assertion) {
        throw new Error("AssertionError: Expected true, got false: " + text);
    }
}
function assertFalse(assertion, text) {
    if (assertion) {
        throw new Error("AssertionError: Expected false, got true: " + text);
    }
}
function assertFallsWithin(p, t) {
    assertTrue(t.fallsWithin(p), "falls within? " + p.pos);
}
function assertNotFallsWithin(p, t) {
    assertFalse(t.fallsWithin(p), "falls within? " + p.pos);
}
function testQTree() {
    function mp(x, y) {
        return new Particle(x, y);
    }
    var t = new QuadTree(createVector(200, 300), 50, 40);
    assertNotFallsWithin(mp(0, 100), t);
    assertNotFallsWithin(mp(251, 300), t);
    assertNotFallsWithin(mp(149, 300), t);
    assertFallsWithin(mp(176, 281), t);
    assertNotFallsWithin(mp(174, 281), t);
    assertTrue(t.insert(mp(180, 290)), "accept point");
    assertTrue(t.insert(mp(201, 301)), "accept point");
    var r1 = new Rectangle(920, 780, 140, 120);
    var r2 = new Rectangle(918, 720, 100, 140);
    debugger;
    assertTrue(r1.overlaps(r2), "should overlap");
}
function randomScreenPosition() {
    return createVector(random(width), random(height));
}
function centerScreenPos() {
    return createVector(width / 2, height / 2);
}
function randomInt(min, max) {
    return round(random(min, max));
}
function translateToVec(pos) {
    translate(pos.x, pos.y);
}
function minBy(list, fn) {
    if (list.length < 0) {
        return undefined;
    }
    var recordItem = list[0];
    var recordWeight = fn(list[0]);
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        var weight = fn(item);
        if (weight > recordWeight) {
            recordWeight = weight;
            recordItem = item;
        }
    }
    return recordItem;
}
function repeat(num, fn) {
    for (var i = 0; i < num; i++) {
        fn(i);
    }
}
function randomBoolean() {
    return Math.random() > 0.5;
}
function mousePosAsVector() {
    return createVector(mouseX, mouseY);
}
function timeIt(fn) {
    var a = millis();
    fn();
    return millis() - a;
}
var gPoints;
var qtree;
var qtreeFromScratch;
var gQueryRectangle;
var isGridOn = false;
var isDrawAllPoints = false;
var isDrawQueryResults = true;
function toggleDrawAllPoints() {
    isDrawAllPoints = !isDrawAllPoints;
    return isDrawAllPoints;
}
function toggleDrawQueryResults() {
    isDrawQueryResults = !isDrawQueryResults;
    return isDrawQueryResults;
}
function setup() {
    createCanvas(windowWidth, windowHeight);
    gPoints = [];
    var center = createVector(width / 2, height / 2);
    qtree = new QuadTree(center, width, height);
    repeat(100000, function (ix) { return gPoints.push(Particle.perlinRandomOnScreen(ix)); });
}
function mouseDragged() {
    var p = new Particle(mouseX, mouseY);
    gPoints.push(p);
    qtree.insert(p);
}
function update() {
    gQueryRectangle = new Rectangle(mouseX, mouseY, 100, 100);
    gTimings.timeToBuild = timeIt(function () {
        qtreeFromScratch = QuadTree.build(width / 2, height / 2, width, height, gPoints);
    });
    gTimings.timeToQuery = timeIt(function () { return (gQueryResults = qtreeFromScratch.query(gQueryRectangle)); });
    gTimings.timeToLocateNaively = timeIt(function () {
        return gPoints.filter(function (p) { return dist(p.pos.x, p.pos.y, mouseX, mouseY) < 100; });
    });
}
function draw() {
    gTimings.update = timeIt(function () { return update(); });
    gTimings.drawOnly = timeIt(function () { return drawOnly(); });
}
function drawOnly() {
    background("black");
    if (isGridOn) {
        drawDebugGrid();
    }
    drawQuadTreeForP5(qtree);
    if (isDrawAllPoints) {
        stroke("white");
        strokeWeight(2);
        for (var _i = 0, gPoints_1 = gPoints; _i < gPoints_1.length; _i++) {
            var p = gPoints_1[_i];
            point(p.pos.x, p.pos.y);
        }
    }
    rectMode(CENTER);
    noFill();
    stroke("orange");
    strokeWeight(0.3);
    rect(gQueryRectangle.cx, gQueryRectangle.cy, gQueryRectangle.w, gQueryRectangle.h);
    if (isDrawQueryResults) {
        strokeWeight(7);
        stroke("red");
        for (var _a = 0, gQueryResults_1 = gQueryResults; _a < gQueryResults_1.length; _a++) {
            var p = gQueryResults_1[_a];
            point(p.pos.x, p.pos.y);
        }
    }
    logLines(50, height - 400, [
        "FPS: " + frameRate().toFixed(2),
        "query count: " + gQueryResults.length,
        "full count: " + gPoints.length,
        "update() (ms): " + gTimings.update.toFixed(2),
        "drawOnly() (not update) (ms): " + gTimings.drawOnly.toFixed(2),
        "query time (ms): " + gTimings.timeToQuery.toFixed(2),
        "Rebuild time (ms): " + gTimings.timeToBuild.toFixed(0),
        "Naive query (ms):" + gTimings.timeToLocateNaively.toFixed(2)
    ]);
}
var gTimings = {
    timeToBuild: 0,
    timeToQuery: 0,
    update: 0,
    drawOnly: 0,
    timeToLocateNaively: 0
};
var gQueryResults;
function logLines(x, y, lines) {
    var lineHeight = 40;
    textSize(30);
    fill("gray");
    stroke("whitesmoke");
    rectMode(CORNER);
    rect(x - 30, y - 30, width - 60, lines.length * lineHeight + 60);
    noStroke();
    fill("black");
    push();
    translate(x, y);
    lines.forEach(function (line, ix) {
        translate(0, lineHeight);
        text(line, 0, 0);
    });
    pop();
}
function drawDebugGrid() {
    noStroke();
    fill("gray");
    textSize(8);
    for (var x = 0; x < width; x += 50) {
        for (var y = 0; y < height; y += 50) {
            text(x + "," + y, x, y);
        }
    }
}
function keyPressed() {
    if (key == "d") {
        toggleDrawAllPoints();
    }
    if (key == "q") {
        toggleDrawQueryResults();
    }
}
//# sourceMappingURL=data:application/json;base64,